#!/bin/bash

#Ensure a filename was entered

if [ -z "$1" ]
then
    echo -e "No filename was given as argument. Eg: test.sh <filename>"
    exit 1
fi

#Ensure target is a file

if [ ! -f "$1" ]
then
    echo -e "[-] $1 is not a file, Please enter a valid filename\n"
    exit 1
fi

#Declaring Variables
TARGET_FILE="$1"                                                          #The valid target file
MAIN_DIR="export_forensics_results"                                       #Main Directory to store results
TARGET_SUBDIR="dir_${TARGET_FILE}"                                        #Sub Directory to store results
FILE_TRID="${MAIN_DIR}/${TARGET_SUBDIR}/trid_${TARGET_FILE}"              #File to store TRID results
FILE_PDFID="${MAIN_DIR}/${TARGET_SUBDIR}/pdfid_${TARGET_FILE}"            #File to store PDFID results
FILE_PDFPARSER="${MAIN_DIR}/${TARGET_SUBDIR}/pdfparser_${TARGET_FILE}"            #File to store pdf-parser results
FILE_PEEPDF="${MAIN_DIR}/${TARGET_SUBDIR}/peepdf_${TARGET_FILE}"            #File to store PEE-PDF results
FILE_PESEC="${MAIN_DIR}/${TARGET_SUBDIR}/PESEC_${TARGET_FILE}"             #File to store PESEC Index results
FILE_BINWALK="${MAIN_DIR}/${TARGET_SUBDIR}/BINWALK_${TARGET_FILE}"         #File to store BINWALK Index results
FILE_FLOSS="${MAIN_DIR}/${TARGET_SUBDIR}/FLOSS_${TARGET_FILE}"            #File to store the pulled string
#FILE_YARA="${MAIN_DIR}/${TARGET_SUBDIR}/YARA_${TARGET_FILE}"              #File to store YARA Index results
FILE_HASH="${MAIN_DIR}/${TARGET_SUBDIR}/hash_${TARGET_FILE}"              #File to store PEHASH results
FILE_FULL="${MAIN_DIR}/${SUB_DIR}/full_${TARGET_FILE}"                    #File to store full result


#Ask to delete the previously created export directory
while true; do
    read -p "Do you want to delete the previously created export directory? (y/n)" yn
    case $yn in 
        [Yy]* ) rm -rf ${MAIN_DIR}; break;;
        [Nn]* ) break;;
    esac
done

#Create the main directory, if needed
if [ -d "${MAIN_DIR}" ]
then
    echo -e "[-] Main directory already exists, skipping...\n"
else
    echo -e "[+] Creating main directory (/${MAIN_DIR})\n"
    mkdir ${MAIN_DIR}
fi

#Create the subdirectory, if needed

if [ -d "${MAIN_DIR}/${TARGET_SUBDIR}" ]
then
    echo -e "[-] Subdirectory already exists, skipping... \n"
else
    echo -e "[+] Creating subdirectory (${MAIN_DIR}/${TARGET_SUBDIR})\n"
    cd ${MAIN_DIR}
    mkdir ${TARGET_SUBDIR}
    cd ..
fi

#If files already exists, delete to rerun scans

rm -f ${FILE_TRID}
rm -f ${FILE_PDFID}
rm -f ${FILE_PEEPDF}
rm -f ${FILE_HASH}
rm -f ${FILE_FLOSS}
rm -f ${FILE_PESEC}
rm -f ${FILE_BINWALK}
#rm -f ${FILE_YARA}
rm -f ${FILE_PDFPARSER}
rm -f ${FILE_FULL}

# Run TRID
echo "[+] Identifying the correct file format"
echo -e "[+] ============== [ TRID ] =============\n" >> ${FILE_FULL}
trid ${TARGET_FILE} >> ${FILE_TRID}
cat -n ${FILE_TRID} >> ${FILE_FULL}

# run PDFID
echo "[+] Scanning the PDF for its keywords and headers"
echo -e "\n[+] ============== [ PDFID ] ============\n" >> ${FILE_FULL}
pdfid ${TARGET_FILE} >> ${FILE_PDFID}
cat -n ${FILE_PDFID} >> ${FILE_FULL}

# run pdf-parser
echo "[+] Scanning the PDF using pdf-parser for data"
echo -e "\n[+] ============== [ PDF-PARSER] ============\n" >> ${FILE_FULL}
pdf-parser.py ${TARGET_FILE} >> ${FILE_PDFPARSER}
cat -n ${FILE_PDFPARSER} >> ${FILE_FULL}

# run peepdf
echo "[+] Scanning the PDF using PEEPDF for data"
echo -e "\n[+] ============== [ PEEPDF] ============\n" >> ${FILE_FULL}
peepdf ${TARGET_FILE} >> ${FILE_PEEPDF}
cat -n ${FILE_PEEPDF} >> ${FILE_FULL}

# Run pesec and binwalk
echo "[+] Checking for certificates"
echo -e "\n[+] ============== [ PESEC & BINWALK ] =============\n" >> ${FILE_FULL}
pesec ${TARGET_FILE} >> ${FILE_PESEC}
cat -n ${FILE_PESEC} >> ${FILE_FULL} 
binwalk ${TARGET_FILE} >> ${FILE_BINWALK}
cat -n ${FILE_BINWALK} >> ${FILE_FULL} 

# Run pehash
echo "[+] Scanning for hashes"
echo -e "\n[+] ============== [ PEHASH ] =============\n" >> ${FILE_FULL}
pehash -a ${TARGET_FILE} >> ${FILE_HASH}
cat -n ${FILE_HASH} >> ${FILE_FULL}   

# Run floss
echo "[+] pulling strings"
echo -e "\n[+] ============== [ FLOSS ] =============\n" >> ${FILE_FULL}
echo -e "\033[1;3;5m SCANNING FILE NOW! PLEASE WAIT!\033[0m"
floss ${TARGET_FILE} >> ${FILE_FLOSS}
cat -n ${FILE_FLOSS} >> ${FILE_FULL}    
    
#Run YARA index

#echo -e "\n[+] ============== [ YARA INDEX ] =============\n" >> ${FILE_FULL}
#echo "[+] YARA Index Scan"
#yara -w -s 1 /usr/local/yara-rulesindex.yar ${TARGET_FILE} >> ${FILE_YARA}
#cat -n ${FILE_YARA} >> ${FILE_FULL}
    
#Final option
echo -e "============ [ END ] ============\n" >> ${FILE_FULL}
echo -e ">>> Output files are located in the (${MAIN_DIR}/${TARGET_SUBDIR}/) directory <<</n"

#show results at the end

while true; do
    read -p "Do you want to view the full report now? (y/n)" yn
    case $yn in
        [Yy]* ) scite ${FILE_FULL}; break;;
        [Nn]* ) break;;
    esac
done 
echo -e "Exiting now!"
    
    
    

